<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssola2.model.mapper.MemberMapper">

	<resultMap type="com.ssola2.model.dto.Member" id="MemberResult">
		<id column="id" property="id"></id>
		<result column="password" property="password"></result>
		<result column="nickname" property="nickname"></result>
		<result column="deleted" property="deleted"></result>
		<result column="user_type" property="userType"></result>
		<result column="reg_date" property="regDate"></result>
	</resultMap>

	<sql id="selectSql">
		SELECT id, nickname, phonenumber, deleted, user_type, reg_date
		FROM MEMBER
	</sql>
	
	<!-- selectMembers => 메서드 이름이라고 생각해도 됨 -->
	<select id="selectMembers" resultMap="MemberResult">
		<include refid="selectSql" />
	</select>

	<insert id="insertMember" parameterType="Member">
		INSERT INTO MEMBER (id, password, nickname, user_type)
		VALUES (#{id}, #{password}, #{nickname}, #{userType})
		<!-- #{}객체는 dto객체의 멤버변수와 동일해야 한다. -->
	</insert>

	<insert id="insertCustomer" parameterType="Customer">
		INSERT INTO CUSTOMER (id, email, birth, gender)
		VALUES (#{id}, #{email}, #{birth}, #{gender})
	</insert>

	<insert id="insertAdministrator" parameterType="Administrator">
		INSERT INTO administrator (id, authority)
		VALUES (#{id}, #{authority})
	</insert>

	<select id="selectMemberById" resultMap="MemberResult"
		parameterType="java.lang.String">

		<include refid="selectSql" />
		WHERE id = #{id} AND DELETED = 0

	</select>

	<select id="selectMemberByIdAndPassword" resultMap="MemberResult"
		parameterType="HashMap"> <!-- String, String이 불가능하기 때문에, DTO 객체를 이용 -->
		<include refid="selectSql" />
		WHERE id = #{id} AND password = #{password} AND DELETED = 0
	</select>
	
	<select id="selectCustomerById" resultType="Customer"
		parameterType="java.lang.String">
		SELECT id, email, birth, gender
		FROM CUSTOMER
		WHERE id = #{id}
	</select>
	
	<select id="selectAdministratorById" resultType="Administrator"
		parameterType="java.lang.String">
		SELECT id, authority
		FROM administrator
		WHERE id = #{id}
	</select>
	
	<select id="selectIdById" resultType="String"
		parameterType="String">
		SELECT id
		FROM MEMBER
		WHERE id = #{id} AND DELETED = 0
	</select>
	
	<select id="selectNicknameByNickname" resultType="String"
		parameterType="String">
		SELECT nickname
		FROM MEMBER
		WHERE nickname = #{nickname} AND DELETED = 0
	</select>
	
	<!-- <update id="updatePasswordByIdAndEmail" parameterType="Customer">
		UPDATE
			(
				SELECT password as passwd
				FROM MEMBER m, CUSTOMER c
				WHERE m.id = #{id} and c.email = #{email} and m.id = c.id			
			)
		SET passwd = #{password}
	</update> -->
	
	<update id="updatePasswordByIdAndEmail" parameterType="Customer">
		UPDATE MEMBER m inner join CUSTOMER c
		on m.ID = c.ID
		set password = #{password}
		where m.ID = #{id} and c.email = #{email}
	</update>

	<!-- 선민 - 회원정보 수정 -->
	<update id="updateMember" parameterType="com.ssola2.model.dto.Member">		
		UPDATE MEMBER 
		SET password=#{password}, nickname=#{nickname}
		WHERE id=#{id}
	</update>
	
	<update id="updatePasswdN" parameterType="com.ssola2.model.dto.Member">		
		UPDATE MEMBER 
		SET nickname=#{nickname}
		WHERE id=#{id}
	</update>
	
	<update id="updateCustomer" parameterType="com.ssola2.model.dto.Customer">
		
		UPDATE CUSTOMER SET EMAIL = #{email} WHERE id = #{id}
		
	</update>
	
	<!-- 선민 - 회원탈퇴 -->
	<delete id="deleteMember" parameterType="com.ssola2.model.dto.Member">
	UPDATE MEMBER
	SET DELETED = 1
	WHERE id= #{id}		
	</delete>
	
	<!-- 프로필 정보 -->
	<select id="selectProfile" resultType="com.ssola2.model.dto.Profile" parameterType="String">
		select m.id, m.nickname, m.phonenumber, c.email, c.birth, c.gender, p.description, p.image
		from MEMBER m
		join CUSTOMER c
		ON m.id = c.id
		join PROFILE p
		on c.id = p.id
		where m.id = #{id};
	</select>
	
	
</mapper>